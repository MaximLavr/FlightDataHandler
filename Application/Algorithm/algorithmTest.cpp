#include "mat.h"
#include <iostream>
#include <filesystem>
#include <vector>
#include <fstream>
#include <string>


std::vector<double> AR_table = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0224497669970875,0.571986576793005,1.06157031230321,1.56541545189505,2.04384802005831,2.49569297679301,2.91977528209913,3.28768000000000,3.65490176000000,4.05875100034986,4.39493056606415,4.70346096699709,4.98217394234553,5.25359145049563,5.50558073920813,5.73978409807956,5.96890457839556,6.17174521017963,6.36181321720681,6.53158402708549,6.70149208069971,6.86346794205210,7.01109013752657,7.16233215085112,7.30273552516129,7.44947165294461,7.59631416385968,7.73701458580645,7.88877731656541,8.02034733419355,8.16508116952130,8.34049434756275,8.52499224473767,8.70919963756476,8.89267883067235,9.07499212868878,9.26425960988064,9.44281990994075,9.61888038615794,9.77565397537281,9.92166441436872,10.0728249821107,10.2206254610070,10.3572537128660,10.4975805514154,10.6335918481839,10.7649634316398,10.8848470929502,11.0062553519256,11.1591651888542,11.3000648706688,11.4357509048877,11.5721418062917,11.6988977991515,11.8221196439898,11.9473129409856,12.0650337227621,12.1808998560915,12.2954635052172,12.4045423963851,12.5134181712437,12.6225768094189,12.7325042905371,12.8582857077002,13.0054250570136,13.1537686394048,13.3022769603947,13.4548044452489,13.6004420492487,13.7383954101658,13.8726173107872,14.0021687795998,14.1261108450906,14.2435045357466,14.3534108800549,14.4757912783843,14.6061808554668,14.7253944494517,14.8411079542498,14.9490462105027,15.0536552539276,15.1564138410075,15.2588007282256,15.3649760491024,15.4707920828357,15.5890644705478,15.7075427705263,15.8247512781955,15.9392142889796,16.0343818689581,16.1254839159613,16.2115802754887,16.2896508700322,16.3806832157165,16.4759497455752,16.5658534428706,16.6505808408343,16.7353130769051,16.8252316553846,16.9456328129014,17.0968018838305,17.2562454688169,17.4106391665477,17.5466585757100,17.6778502935831,17.7872828341726,17.8877067636364,17.9987317713108,18.1418333333333,18.2592320621963,18.3790452050535,18.4971410534500,18.6331702069971,18.7747131457726,18.9067310000000,19.0178690023324,19.1190592000000,19.2068650874636,19.2948788058309,19.3855615589504,19.4798250728863,19.5657528018659,19.6457275437901,19.7179474276385,19.7870185264140,19.8668571428571,19.9480000000000,20.0320000000000,20.1228571428571,20.1874285714286,20.2496591362488,20.3138815875607,20.3710664723032,20.4124124921283,20.4377589574344,20.4601979078717,20.4940343315841,20.5884136939487,20.7589885817452,20.9160706889415,21.0089928786458,21.0677958046132,21.1130083646941,21.1486502668499,21.1779209373621,21.2053867669753,21.2306462641975,21.2508334000000,21.2713970750000,21.2948224000000,21.3280046296296,21.3690251851852,21.4174090740741,21.4731562962963,21.5355511000000,21.6168210234568,21.7108855012346,21.8026722765432,21.8799950876543,21.9317740049383,21.9755415348765,22.0135025348765,22.0495478000000,22.0866233577161,22.1327132765432,22.1845546682099,22.2351074765432,22.2791805515432,22.3152343750000,22.3404585086420,22.3625786941358,22.3887614000000,22.4281082549383,22.4844839506173,22.5445113500000,22.5938575160494,22.6250380219136,22.6483328000000,22.6710798225309,22.6946132330247,22.7230566756173,22.7584613811728,22.7981948666667,22.8402368000000,22.8811578317901,22.9183333333333,22.9540000000000,22.9893333333333,23.0250000000000,23.0526666666667,23.0803333333333,23.1073333333333,23.1336666666667,23.1596666666667,23.1856666666667,23.2116666666667,23.2380000000000,23.2640000000000,23.2900000000000,23.3103333333333,23.3313333333333,23.3520000000000,23.3730000000000,23.3940000000000,23.4146666666667,23.4356666666667,23.4563333333333,23.4773333333333,23.4983333333333,23.5159232653846,23.5340314347283,23.5528408633293,23.5718202249841,23.5907818852791,23.6091873643676,23.6275598699716,23.6453553112473,23.6623860537812,23.6781710586075,23.6901301642958,23.7012878551572,23.7133206193546,23.7252093407637,23.7460449964623,23.7700438821090,23.7930121131174,23.8147858010631,23.8352010575219,23.8540939940694,23.8713007222811,23.8866573537328,23.9 };
std::vector<double> ARU_table = { 0,0.370215384615385,0.718646153846154,1.04196923076923,1.33686153846154,1.600,1.81755246160254,2.00076434408740,2.17337948188255,2.35914170941595,2.58179486111556,2.84139250496607,3.15445300697259,3.49934656732244,3.85437226500723,4.19782917901855,4.50541856093295,4.78837962394101,5.06232298926428,5.32877934460641,5.60252827988338,5.87563222335792,6.15280813253301,6.43493559471789,6.73112121916403,7.02441637402597,7.31896086050420,7.59786465882353,7.86475585026738,8.11607457239519,8.35775880095415,8.57343298395722,8.79088766155813,9.01664045300198,9.26193257329945,9.53289583371634,9.83674352660779,10.1554759729720,10.4698411764706,10.7781871902332,11.0611667295490,11.2951701271137,11.5186254500000,11.7259494973761,11.9263354239067,12.1183880718659,12.3114381760933,12.5148790370389,12.7500354474331,12.9859390455571,13.2247448000000,13.4275592827481,13.6181401238180,13.80,13.9885907546252,14.1640962317875,14.3321721520381,14.5012173913043,14.6715121151694,14.8512430780508,15.0495668857976,15.2278619668471,15.4079041172845,15.5839406220741,15.7598363561849,15.9327870187422,16.1045714285714,16.2742873802582,16.4390537142857,16.6044695643482,16.7761782857143,16.9332608858531,17.1112586540423,17.2984081029571,17.4840653200426,17.6677948614744,17.8360189401453,17.9876681799250,18.1255443594104,18.2466991213152,18.3603330612245,18.4609091666667,18.5655666213152,18.6799644387755,18.8143513000000,18.9585643769679,19.1094681851312,19.2639909903790,19.4190610586006,19.5716066556851,19.7290340800000,19.8813400000000,20.0345675200000,20.1842929600000,20.3260926400000,20.4555428800000,20.5723746406997,20.6753544172595,20.7690980758018,20.8620725364432,20.9581742684548,21.0561056205248,21.1677575332945,21.2936966418659,21.4346072667055,21.5811031099708,21.7151612492128,21.8398282038484,21.9549337600000,22.0549478400000,22.1437774572595,22.2186126311370,22.2900000000000,22.3628920219242,22.4404888629738,22.5309593525364,22.6342231210464,22.7774297123499,22.9527986415838,23.1453550202279,23.3401239597619,23.5148446375057,23.6647226383030,23.7766145669871,23.8582284255065,23.9310287199622,23.9904749243245,24.0417259820312,24.0862518015365,24.1280137758691,24.1683914412604,24.2080683072533,24.2506144902497,24.2980656361474,24.3524573908442,24.4171745169145,24.4970929096296,24.5872569575735,24.6838121380147,24.7883612472331,24.8971817355365,25.0021856993382,25.1075235541204,25.2134771247059,25.3143276535076,25.4103997017865,25.50,25.5966759188542,25.6935192751042,25.7871717758333,25.8806749508333,25.9647331294792,26.0485843386458,26.1305755078125,26.2105968769792,26.2885386861458,26.3629582866667,26.4389484375000,26.5132475916088,26.5837199109375,26.6532876337963,26.7166505015625,26.7778646484375,26.8384763578125,26.8999870814815,26.9605487189815,27.0216631814815,27.0848735197338,27.1522571875000,27.2201742854321,27.2876581922531,27.3504111365432,27.4132346641667,27.4751931691667,27.5387938264198,27.6031081595988,27.6671560245988,27.7335219800000,27.8012450574250,27.8740910453616,27.9514029872310,28.0213250234215,28.0938188819048,28.1668747145679,28.2384396523457,28.3106759319929,28.3815227276190,28.4490255828571,28.5151874371076,28.5780083491358,28.6383222634921,28.6907311777778,28.7413956349206,28.7905789492064,28.8375558035714,28.8845839750000,28.9309154607143,28.9768135750000,29.0215889269841,29.0674056126984,29.1135733841270,29.1515249805556,29.1910189964286,29.2340000000000,29.2830000000000,29.3830000000000,29.4830000000000,29.5830000000000,29.6830000000000,29.7830000000000,29.8879466847222,30.0023957125000,30.1182614069444,30.2272104347222,30.3209094625000,30.3910251569444,30.4412352837963,30.4886627375000,30.5310068578704,30.5654898671296,30.5893339875000,30.5997614412037,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60,30.60 };
std::vector<std::vector<double>> impulse, all_impulse;
std::vector<double> imps, max_imps, lat, lon, timee, alt, GPS_alt, head, pitch, roll, velocity;  // вектора с данными по всем файлам //

// чтение .mat файла //
void matread(const char* file, std::vector<double>& v, const char* variable)
{
    // open MAT-file
    MATFile* pmat = matOpen(file, "r");
    if (pmat == NULL) return;

    // extract the specified variable
    mxArray* arr = matGetVariable(pmat, variable);
    if (arr != NULL && mxIsDouble(arr) && !mxIsEmpty(arr)) {
        // copy data
        mwSize num = mxGetNumberOfElements(arr);
        double* pr = mxGetPr(arr);
        if (pr != NULL) {
            v.reserve(num); //is faster than resize :-)
            v.assign(pr, pr + num);
        }
    }
    // cleanup
    mxDestroyArray(arr);
    matClose(pmat);
}

void find_imps(std::vector<std::vector<double>> cos, std::vector<std::vector<double>> sin, double AR, double ARU, double h) {
    // посчитать все импульсы 
    for (int s = 0; s != cos.size(); s++) {
        for (int l = 0; l != cos[0].size(); l++) {
            double imp = sqrt(pow(cos[s][l] - 2048, 2.0) + pow(sin[s][l] - 2048, 2.0));
            imps.push_back(imp); //все столбцы s строки
        }
        impulse.push_back(imps); //impulse[строка][столбец]
        imps.clear();
    }
    // найти максимальные импульсы 
    for (int s = 0; s != 341; s++) {
        double max_imp = impulse[1][s];
        for (int l = 0; l != 63; l++) {
            max_imp = impulse[l][s] > max_imp ? impulse[l][s] : max_imp; //максимальный импульс для s столбца
        }
        max_imps.push_back(max_imp * AR * ARU / h);
    }
    all_impulse.push_back(max_imps);
    impulse.clear();
    max_imps.clear();

}

// обработка импульса 
void pulse_processing(const char* file)
{
    // высота 
    std::vector<double> h_v;
    matread(file, h_v, "Hrv");
    std::vector<double> GPS_alt_v;
    matread(file, GPS_alt_v, "G_Alt");

    // широта и долгота 
    std::vector<double> lat_v;
    matread(file, lat_v, "G_Lat");
    std::vector<double> lon_v;
    matread(file, lon_v, "G_Long");

    // AR, ARU 
    std::vector<double> AR_v, ARU_v;
    double true_AR, true_ARU;
    matread(file, AR_v, "AR");
    if (AR_v[0] != 0)
        true_AR = pow(10.0, AR_table[AR_v[0] - 1] / 20.0);
    else
        true_AR = 1;
    matread(file, ARU_v, "ARU");
    true_ARU = pow(10.0, ARU_table[ARU_v[0] - 1] / 20.0);

    // время 
    std::vector<double> time_v;
    matread(file, time_v, "Trv");

    // скорость 
    std::vector<double> Vx_v;
    matread(file, Vx_v, "G_Vx");
    std::vector<double> Vy_v;
    matread(file, Vy_v, "G_Vy");
    std::vector<double> Vz_v;
    matread(file, Vz_v, "G_Vz");

    double vel = sqrt(Vx_v[0] * Vx_v[0] + Vy_v[0] * Vy_v[0] + Vz_v[0] * Vz_v[0]);

    // эволюция 

    std::vector<double> Head_v;
    matread(file, Head_v, "B_Head");
    std::vector<double> Pitch_v;
    matread(file, Pitch_v, "B_Pitch");
    std::vector<double> Roll_v;
    matread(file, Roll_v, "B_Roll");

    // вектор максимальных импульсов 
    std::vector<double> cos;
    std::vector<double> sin;
    std::vector<std::vector<double>> cos_columns;
    std::vector<std::vector<double>> sin_columns;
    cos_columns.resize(63, std::vector<double>(341));
    sin_columns.resize(63, std::vector<double>(341));

    matread(file, cos, "Sig_C1");
    matread(file, sin, "Sig_S1");

    for (int i = 0; i < cos.size(); i++) {
        int c = i / 63;
        int d = i % 63;
        cos_columns[d][c] = cos[i];
        sin_columns[d][c] = sin[i];
    }
    find_imps(cos_columns, sin_columns, true_AR, true_ARU, h_v[0]);


    cos_columns.clear();
    sin_columns.clear();

    lat.push_back(lat_v[0]);
    lon.push_back(lon_v[0]);
    timee.push_back(time_v[0]);
    alt.push_back(h_v[0]);
    GPS_alt.push_back(GPS_alt_v[0]);
    head.push_back(Vx_v[0]);
    pitch.push_back(Vy_v[0]);
    roll.push_back(Vz_v[0]);
    velocity.push_back(vel);
}

// найти файлы в папке //
void get_files(std::vector<std::string>& paths, const std::string& current_path)
{
    for (const auto& file : std::filesystem::directory_iterator(current_path)) {
        if (std::filesystem::is_directory(file)) {
            get_files(paths, file.path().string());
        }
        else {
            paths.push_back(file.path().string());
        }
    }
}

std::string extractLastNChars(std::string const& str, int n)
{
    if (str.size() < n) {
        return str;
    }
    return str.substr(str.size() - n);
}

void files_processing(const std::string& file_name) {
    std::vector<std::string>paths, files;
    get_files(paths, file_name);

    for (int i = 0; i < paths.size(); i++) {
        if (extractLastNChars(paths[i], 3) == "mat")
            pulse_processing(paths[i].c_str());
    }
}

void water() {

    std::ofstream outfile;
    outfile.open("forest.bin", std::ios_base::app); // append instead of overwrite

    for(int i = 0; i < 753; i++)
        for (int k = 0; k != 341; k++) {
            outfile << all_impulse[i][k] << std::endl;
        }
}



void read_bin(std::string name, std::vector<double> v) {

    std::ofstream wf(name, std::ios::out | std::ios::binary);

    for (int i = 0; i < 25834; i++)
        wf.write((char*)&v[i], sizeof(v[i]));
    wf.close();

}

int main()
{
    files_processing("C:\\Users\\citilink\\Desktop\\NTagil_18_12_21\\data"); // путь к папке с файлами 
    read_bin("latitude.dat", lat);
    read_bin("longtitude.dat", lon);
    read_bin("time.dat", timee);
    read_bin("alt.dat", alt);
    read_bin("GPS_alt.dat", GPS_alt);
    read_bin("head.dat", head);
    read_bin("pitch.dat", pitch);
    read_bin("roll.dat", roll);
    read_bin("velocity.dat", velocity);

    return 0;
}