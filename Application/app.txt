#include "../SparkyEngine/src/sparky.h"
#include "UI/button.h"
#include "Map/map.h"
#include "Track/track.h"
#include "GettingGraphics/Graphics.h"

using namespace sparky;
using namespace graphics;
using namespace maths;
using namespace app_graphics;
using namespace app_utils;

class App : public Sparky
{
private:
    Window* window;

    Layer* layer1;
    Layer* layer2;
    Layer* layer3;
    Layer* pointLayer;
    Layer* pointTestLayer;

    Layer* mapMask;

    Shader* shader_map;
    Shader* shader2;
    Shader* shaderTransparent;

    /*info*/
    Group* groupSpriteInfo;
    Group* groupSpriteLog;
    Sprite* spriteInfo;
    Group* groupSurfaceInfo;
    Group* groupSurfaceLog;
    Group* groupFpsLog;

    /*test data*/
    Sprite* spriteGraphic;
    Texture* imageGraphic;

    /*text for infoButtons*/
    Label* textInfoButton1;
    Label* textInfoButton2;
    Label* textInfoButton3;
    Label* textInfoButton4;
    Label* textInfoButton5;
    Label* textInfoButton6;
    Label* textInfoButton7;
    Label* textInfoButton8;
    Label* textZoomInButton;
    Label* textZoomOutButton;

    Label* surfaceText;
    Label* surfaceLog;

    Label* logLatLon;
    Label* logTime;
    Label* logAlt;
    Label* logGPSAlt;
    Label* logYaw;
    Label* logPitch;
    Label* logRoll;
    Label* logVelocity;
    Label* logDoubles;

    Label* textFps;
    Label* logFps;

    /*Shift for info button*/
    float xShiftMapInfo;
    float yShiftMapInfo;

    Sprite* infoSprite;

    float cameraLeft;
    float cameraRight;
    float cameraBottom;
    float cameraUp;

    bool checked = false;

    Button* loadDataButton;
    Button* analyzeDataButton;
    Button* zoomInButton;
    Button* zoomOutButton;
    Button* impulseGraphButton;
    Button* impulseHistButton;
    Button* altGraphButton;
    Button* surfTypeGraphButton;
    Button* moveUpButton;
    Button* moveDownButton;
    Button* moveLeftButton;
    Button* moveRightButton;

    /*Map renderer*/
    //48.858093 2.294694
    //37.331675, -122.008276

    //58.024353, 61.530740
    //55.7558, 37.6173
    //59.9343° N, 30.3351
    //..56.8431° N, 60.6454
    //57.92149, 59.98162
    //1.28967, 103.85007
    //56.628237, 59.895109

    //55.92850639, 37.51912426 mipt
    //55.75222, 37.61556 moscow
    //-18.909572, 47.525388 madagascar
    //43.72722, 15.90583 no one
    //56.821006, 60.624568 maxidom
    //57.970752, 61.673364 track

    Map* map = nullptr;

    Track* track = nullptr;

    Sprite* spritePoint;

    vec2 MapPointPos;
    mat4 ortho;

    double* allData = new double[9];
    int minZoom = 2; //need to work with more
    int maxZoom = 15; //need to work with more

    Graphics* graphics;
    Sprite* surface;

public:
    App()
    {
    }

    ~App()
    {
        delete layer1;
        delete layer2;
        delete layer3;
        delete map;
        delete[] allData;
    }

    void init() override
    {
        vec2 a = vec2(1, 1);
        vec2 b = vec2(2, 2);
        std::cout << "a = " << a << std::endl;
        std::cout << "b = " << b << std::endl;
        a.Add(b);
        //vec2 c = a + b;
        std::cout << "a = " << a << std::endl;
        std::cout << "b = " << b << std::endl;
        //std::cout << "c = " << c << std::endl;

        window = createWindow("Test Map", 1400, 1080); //700, 540

        FontManager::add(new Font("Arial", "../SparkyEngine/fonts/Arial_Cyr.TTF", 50));

        FontManager::get("Arial")->setScale(window->getWidth() / 11.67f, window->getHeight() / 9.0f);

        FontManager::add(new Font("Arial_small", "../SparkyEngine/fonts/Arial_Cyr.TTF", 30));
        FontManager::get("Arial_small")->setScale(window->getWidth() / 11.67f, window->getHeight() / 9.0f);

        FontManager::add(new Font("Arial_big", "../SparkyEngine/fonts/Arial_Cyr.TTF", 70));
        FontManager::get("Arial_big")->setScale(window->getWidth() / 11.67f, window->getHeight() / 9.0f);

        textInfoButton1 = new Label("coords (lat,lon): ", 1.3f, 5.15f + 0.18f,"Arial", transform_color(1, 1, 1, 1));
        textInfoButton2 = new Label("time (sec): ", 1.3f, 5.15f + 0.18f - 0.7f,"Arial", transform_color(1, 1, 1, 1));
        textInfoButton3 = new Label("alt (m): ", 1.3f,5.15f + 0.18f - 2 * 0.7f,"Arial", transform_color(1, 1, 1, 1));
        textInfoButton4 = new Label("GPS_alt (m): ", 1.3f, 5.15f + 0.18f - 3 * 0.7f,"Arial", transform_color(1, 1, 1, 1));
        textInfoButton5 = new Label("yaw (deg): ", 1.3f,5.15f + 0.18f - 4 * 0.7f,"Arial", transform_color(1, 1, 1, 1));
        textInfoButton6 = new Label("pitch (deg): ", 1.3f, 5.15f + 0.18f - 5 * 0.7f,"Arial", transform_color(1, 1, 1, 1));
        textInfoButton7 = new Label("roll (deg): ", 1.3f, 5.15f + 0.18f - 6 * 0.7f,"Arial", transform_color(1, 1, 1, 1));
        textInfoButton8 = new Label("velocity (m/sec): ", 1.3f, 5.15f + 0.18f - 7 * 0.7f,"Arial", transform_color(1, 1, 1, 1));
        textZoomInButton = new Label("+", 3.9f, 5.15f - 4.8f,"Arial_small", transform_color(1, 1, 1, 1));
        surfaceText = new Label("surface type: ", -1.7f, 7.0f,"Arial_big", transform_color(1, 1, 1, 1));

        textFps = new Label("FPS: ", 8.0f, 8.5f,"Arial", transform_color(1, 1, 1, 1));
        logFps = new Label("", 9.0f, 8.5f,"Arial", transform_color(1, 1, 1, 1));

        shader_map = new Shader("../SparkyEngine/src/shaders/test/shader1.vert","../SparkyEngine/src/shaders/test/shader1.frag");
        shader2 = new Shader("../SparkyEngine/src/shaders/basicTexNoLight.vert","../SparkyEngine/src/shaders/basicTexNoLight.frag");
        shaderTransparent = new Shader("../SparkyEngine/src/shaders/transparent.vert","../SparkyEngine/src/shaders/transparent.frag");

        cameraLeft = -11.67f;   //default: -16.0f
        cameraRight = 11.67f;   //default:  16.0f
        cameraBottom = -9.0f;   //default: -10.0f
        cameraUp = 9.0f;        //default:  10.0f


        ortho = mat4::orthographic(cameraLeft, cameraRight, cameraBottom, cameraUp, -1.0f, 1.0f);

        layer2 = new Layer(new BatchRenderer2D(), shaderTransparent, ortho, true);
        layer3 = new Layer(new BatchRenderer2D(), shaderTransparent, ortho, true);
        pointLayer = new Layer(new BatchRenderer2D(), shader_map, ortho, true);
        mapMask = new Layer(new BatchRenderer2D(), shaderTransparent, ortho, true);

        spriteGraphic = new Sprite(-20.0f + 8.6f + 0.335f + 5.0f + 0.07f, -8.34f, 8.06f, 5.98f, transform_color(0.8f, 0.8f, 0.8f, 0.1f));
        surface = new Sprite(-2.05f, 6.65f, 11.75f, 1, transform_color(0.2f, 0.7f, 0.5f, 1));
        xShiftMapInfo = 2 * 0.67f;
        yShiftMapInfo = -8.34f;
        groupSurfaceInfo = new Group(mat4::translation((maths::vec3(xShiftMapInfo, yShiftMapInfo, 0.0f))));
        groupSurfaceLog = new Group(mat4::translation((maths::vec3(xShiftMapInfo, yShiftMapInfo, 0.0f))));
        groupSurfaceInfo->add(surface);

        groupFpsLog = new Group(mat4::translation((maths::vec3(0.0f, 0.0f, 0.0f))));
        groupFpsLog->add(textFps);
        groupFpsLog->add(logFps);

        groupSurfaceInfo->add(surfaceText);
        //groupSurfaceInfo->add(surfaceLog);
        //groupSurfaceLog->add(surfaceLog);

        //mapInfo
        infoSprite = new Sprite(0.8f, 0.0f, 9.7f - 0.8f, 5.97f, transform_color(0.2f, 0.7f, 0.5f, 1));
        xShiftMapInfo = 2 * 0.67f;
        yShiftMapInfo = -8.34f;
        groupSpriteInfo = new Group(mat4::translation((maths::vec3(xShiftMapInfo, yShiftMapInfo, 0.0f))));
        groupSpriteLog = new Group(mat4::translation((maths::vec3(xShiftMapInfo, yShiftMapInfo, 0.0f))));
        groupSpriteInfo->add(infoSprite);

        groupSpriteInfo->add(textInfoButton1);
        groupSpriteInfo->add(textInfoButton2);
        groupSpriteInfo->add(textInfoButton3);
        groupSpriteInfo->add(textInfoButton4);
        groupSpriteInfo->add(textInfoButton5);
        groupSpriteInfo->add(textInfoButton6);
        groupSpriteInfo->add(textInfoButton7);
        groupSpriteInfo->add(textInfoButton8);

        //images
        //layer2->add(spriteGraphic);

        //buttons
        loadDataButton = new Button(1.34f, 6.3f + 0.3f, 9.67f, 2.0f - 0.3f, transform_color(0.2f, 0.3f, 0.8f, 1),
                                    new Label("load data", 3.0f * 1.2, 0.7f * 1.2f - 0.15f,"Arial_big",
                                              transform_color(1, 1, 1, 1)), window);
        analyzeDataButton = new Button(1.34f, 6.3f - 2.16f + 0.65f, 9.67f, 2.0f - 0.3f, transform_color(0.2f, 0.3f, 0.8f, 1),
                                       new Label("analyse data", 2.6f * 1.2f, 0.7f * 1.2f - 0.15f,"Arial_big",
                                                 transform_color(1, 1, 1, 1)), window);

        impulseGraphButton = new Button(-20.0f + 8.6f + 0.335f, -8.34f + 3 * 1.56f, 5.0f, 1.3f, transform_color(0.2f, 0.3f, 0.8f, 1),
                                      new Label("impulse graph", 1.2f, 0.5f,"Arial",
                                                transform_color(1, 1, 1, 1)), window);
        impulseHistButton = new Button(-20.0f + 8.6f + 0.335f, -8.34f + 2 * 1.56f, 5.0f, 1.3f, transform_color(0.2f, 0.3f, 0.8f, 1),
                                      new Label("impulse hist", 1.38f, 0.5f,"Arial",
                                                transform_color(1, 1, 1, 1)), window);
        altGraphButton = new Button(-20.0f + 8.6f + 0.335f, -8.34f + 1.56f, 5.0f, 1.3f, transform_color(0.2f, 0.3f, 0.8f, 1),
                                         new Label("alt graph", 1.7f, 0.5f,"Arial",
                                                   transform_color(1, 1, 1, 1)), window);
        surfTypeGraphButton = new Button(-20.0f + 8.6f + 0.335f, -8.34f, 5.0f, 1.3f, transform_color(0.2f, 0.3f, 0.8f, 1),
                                       new Label("surface type graph", 0.78f, 0.5f,"Arial",
                                                 transform_color(1, 1, 1, 1)), window);
        zoomInButton = new Button(1.0f - 1.7f, 6.3f + 0.3f, 1.7f, 1.7f, transform_color(0.2f, 0.7f, 0.5f, 1),
                                  new Label("+", 0.55f * 1.2f, 0.5f * 1.2f,"Arial_big", transform_color(1, 1, 1, 1)), window);

        zoomOutButton = new Button(1.0f - 1.7f, 6.3f + 0.28f - 1.7f - 0.1f, 1.7f, 1.7f, transform_color(0.2f, 0.7f, 0.5f, 1),
                                   new Label("-", 0.625f * 1.2f, 0.6f * 1.2f,"Arial_big", transform_color(1, 1, 1, 1)), window);


        //layer2->add(groupSpriteInfo);
        //layer2->add(groupSpriteLog);

        layer2->add(zoomInButton);
        layer2->add(zoomOutButton);

        layer2->add(loadDataButton);
        //layer2->add(analyzeDataButton);

        /*layer2->add(impulseGraphButton);
        layer2->add(impulseHistButton);
        layer2->add(altGraphButton);
        layer2->add(surfTypeGraphButton);*/

        /*layer2->add(groupSurfaceInfo);
        layer2->add(groupSurfaceLog);
        layer2->add(groupFpsLog);*/


        mapMask->add(new Sprite(-20.0f + 8.6f + 0.335f, -1.7f, 10.0f, 10.0f, transform_color(0.8f, 0.8f, 0.8f, 0.1f)));

        for (int i = 0; i < 9; i++)
        {
            allData[i] = -1;
        }
    }

    void tick() override
    {
    }

    bool canZoomIn = true;
    bool canZoomOut = true;

    bool canGetImpulseGraph = false;
    bool canGetImpulseHist = false;
    bool canGetAltGraph = false;
    bool canGetSurfTypeGraph = false;
    bool graph = false;
    bool hist = false;
    bool alt = false;
    bool surf = false;

    bool fl = true;
    int counterRemoved = 5;
    bool test_flag = true;

    bool loaded = false;

    bool pixelTest;
    bool hoverFlag;
    void update() override {
        if (map != nullptr) {
            if (map->isLoaded()) {
                mapMask->remove_all();
            }
        }
        if (loadDataButton->isPresed() && map == nullptr && !loaded) {
            std::string pathToTrackFile = "../Data/Track/NTagil-3.txt";
            /*track = new Track(pathToTrackFile, minZoom, maxZoom, transform_color(1, 0, 0, 1),
                              shader_map, ortho, window, 1);*/
            /*map = new Map(-20.0f + 8.6f + 0.335f, -1.7f, 10.0f, track->CenterLatLong, track->SideMeters, track->SideMeters, shader_map, ortho, cameraUp,
                          cameraRight, window);*/
            /*map = new Map(-20.0f + 8.6f + 0.335f, -1.7f, 10.0f, vec2_d(57.707191857876005, 60.158992854799834), 28794.52972985497, 28794.52972985497, shader_map, ortho, cameraUp,
                          cameraRight, window);*/

            map = new Map(-20.0f + 8.6f + 0.335f, -1.7f, 10.0f, 10.0f, vec2_d(43.735020, 15.8942), 28794.52972985497, 28794.52972985497, shader_map, ortho, cameraUp,
                          cameraRight, window);
            //map->AddTrack(track);
            //map->LoadData(map->m_Track->m_MinZoom, map->m_Track->m_MaxZoom);
            map->LoadData(minZoom, maxZoom);
            map->AddTiles();
            //map->AddPointLayer(pointLayer);
            loaded = true;
        }


        if ((window->isMouseButtonClicked(GLFW_MOUSE_BUTTON_1) && map != nullptr))
        {

            if (map->m_Track != nullptr)
            {
                allData = new double[map->m_Track->CountDataString + 2];
                float x = (window->getMousePosition().x - window->getWidth() / 4.0f) / 30.0f;
                float y = -(window->getMousePosition().y - window->getHeight() / 4.0f) / 30.0f;
                for (auto& i : map->m_Track->m_Renderables)
                {
                    bool con1 = (x >= i->getPosition().x - 0.05f) && (x <= i->getPosition().x + i->getSize().x + 0.05f);
                    bool con2 = (y >= i->getPosition().y - 0.05f) && (y <= i->getPosition().y + i->getSize().y + 0.05f);
                    bool con3 = i->getPosition().x <= map->getBoundingBoxPosition().x + map->getBoundingBoxSize().x;
                    bool con4 = i->getPosition().x >= map->getBoundingBoxPosition().x;
                    bool con5 = i->getPosition().y >= map->getBoundingBoxPosition().y;
                    bool con6 = i->getPosition().y <= map->getBoundingBoxPosition().y + map->getBoundingBoxSize().y;
                    if (con1 && con2 && con3 && con4 && con5 && con6) {
                        spriteGraphic->DeleteTexture();
                        spriteGraphic->setColor(transform_color(0.8f, 0.8f, 0.8f, 0.1f));
                        if (!map->isPointAdded)
                            map->isPointAdded = true;
                        groupSpriteLog->remove_all();
                        groupSpriteLog->m_Renderables.clear();
                        pointLayer->remove_all();
                        pointLayer->add(new Sprite(i->getPosition().x - 0.15f, i->getPosition().y - 0.15f, 0.3f, 0.3f,
                                                   new Texture("", "../images/circle.bmp")));
                        map->pointedTrackItem = i;
#if 1

                        allData = map->m_Track->GetInfoFromPixelCoords(i->getPosition(), map->m_Window,
                                                                       map->m_CameraVertical, map->m_CameraHorizontal, map->mapLayer, map->m_TileSide, map->TileLeftUp, map->CurrentZoom);

                        map->m_PointLatLong = new vec2(allData[0], allData[1]);

                        logLatLon = new Label(std::to_string(allData[0]) + ", " + std::to_string(allData[1]), 4.2f, 5.15f + 0.18f,"Arial", transform_color(1, 1, 1, 1));
                        logTime = new Label(std::to_string(allData[2]), 3.3f, 5.15f + 0.18f - 0.7f,"Arial", transform_color(1, 1, 1, 1));
                        logAlt = new Label(std::to_string(allData[3]), 2.6f, 5.15f + 0.18f - 2 * 0.7f,"Arial", transform_color(1, 1, 1, 1));
                        logGPSAlt = new Label(std::to_string(allData[4]), 3.7f, 5.15f + 0.18f - 3 * 0.7f,"Arial", transform_color(1, 1, 1, 1));
                        logYaw = new Label(std::to_string(allData[5]), 3.3f, 5.15f + 0.18f - 4 * 0.7f,"Arial", transform_color(1, 1, 1, 1));
                        logPitch = new Label(std::to_string(allData[6]), 3.4f, 5.15f + 0.18f - 5 * 0.7f,"Arial", transform_color(1, 1, 1, 1));
                        logRoll = new Label(std::to_string(allData[7]), 3.2f, 5.15f + 0.18f - 6 * 0.7f,"Arial", transform_color(1, 1, 1, 1));
                        logVelocity = new Label(std::to_string(allData[8]), 4.4f, 5.15f + 0.18f - 7 * 0.7f,"Arial", transform_color(1, 1, 1, 1));
                        groupSpriteLog->add(logLatLon);
                        groupSpriteLog->add(logTime);
                        groupSpriteLog->add(logAlt);
                        groupSpriteLog->add(logGPSAlt);
                        groupSpriteLog->add(logYaw);
                        groupSpriteLog->add(logPitch);
                        groupSpriteLog->add(logRoll);
                        groupSpriteLog->add(logVelocity);

                        /*std::cout << "times: ";
                        std::cout << map->m_Track->times.size() << std::endl;

                        std::cout << "alts: ";
                        std::cout << map->m_Track->alts.size() << std::endl;

                        std::cout << "impulses: ";
                        std::cout << map->m_Track->impulses.size() << std::endl;*/

                        graphics = new Graphics(map->m_Track->times, map->m_Track->alts, map->m_Track->impulses);
                        std::string result_surface = graphics->GetGraphics();
                        surfaceLog = new Label(result_surface, 1.9f, 7.0f,"Arial_big", transform_color(1, 1, 1, 1));
                        groupSurfaceLog->remove_all();
                        groupSurfaceLog->add(surfaceLog);

                        if (map->m_Track->IsPointFound) {
                            canGetImpulseGraph = true;
                            canGetImpulseHist = true;
                            canGetAltGraph = true;
                            canGetSurfTypeGraph = true;
                            std::cout << "track point found!" << std::endl;
                        }
                        else {
                            canGetImpulseGraph = false;
                            canGetImpulseHist = false;
                            canGetAltGraph = false;
                            canGetSurfTypeGraph = false;
                            std::cout << "track point NOT found!" << std::endl;
                        }
                        pixelTest = true;

#endif
                        break;
                    }
                }
            }
        }
        if (zoomInButton->isPresed() && canZoomIn) {
            if (map != nullptr) {
                map->ZoomIn();
                canZoomIn = false;
            }
        }
        else if (zoomOutButton->isPresed() && canZoomOut) {
            if (map != nullptr) {
                map->ZoomOut();
                canZoomOut = false;
            }
        }
        else if (impulseGraphButton->isPresed() && canGetImpulseGraph && graph) {
            graph = false;
            imageGraphic = new Texture("", "impulse_graph.jpg");
            spriteGraphic->setColor(transform_color(1, 1, 1, 1));
            spriteGraphic->SetTexture(imageGraphic);
        }
        else if (impulseHistButton->isPresed() && canGetImpulseHist && hist) {
            hist = false;
            imageGraphic = new Texture("", "impulse_hist.jpg");
            spriteGraphic->setColor(transform_color(1, 1, 1, 1));
            spriteGraphic->SetTexture(imageGraphic);
        }
        else if (altGraphButton->isPresed() && canGetAltGraph && alt) {
            alt = false;
            imageGraphic = new Texture("", "alt_graph.jpg");
            spriteGraphic->setColor(transform_color(1, 1, 1, 1));
            spriteGraphic->SetTexture(imageGraphic);
        }
        else if (surfTypeGraphButton->isPresed() && canGetSurfTypeGraph && surf) {
            surf = false;
            imageGraphic = new Texture("", "surface_type_graph.jpg");
            spriteGraphic->setColor(transform_color(1, 1, 1, 1));
            spriteGraphic->SetTexture(imageGraphic);
        }
#if 0
        else if (impulseGraphButton->isPressed() && canGetImpulseGraph)
        {
            std::cout << "impulseGraphButton\n";
            /*imageGraphic = new Texture("", "impulse_graph.jpg");
            spriteGraphic->setColor(transform_color(1, 1, 1, 1));
            spriteGraphic->SetTexture(imageGraphic);*/
             canGetImpulseGraph = false;
        }
        else if (impulseHistButton->isPressed() && canGetImpulseHist)
        {
            std::cout << "impulseHistButton\n";
            /*imageGraphic = new Texture("", "impulse_hist.jpg");
            spriteGraphic->setColor(transform_color(1, 1, 1, 1));
            spriteGraphic->SetTexture(imageGraphic);*/
            canGetImpulseHist = false;
        }
        else if (altGraphButton->isPressed() && canGetAltGraph)
        {
            std::cout << "altGraphButton\n";
            /*imageGraphic = new Texture("", "alt_graph.jpg");
            spriteGraphic->setColor(transform_color(1, 1, 1, 1));
            spriteGraphic->SetTexture(imageGraphic);*/
            canGetAltGraph = false;
        }
        else if (surfTypeGraphButton->isPressed() && canGetSurfTypeGraph)
        {
            std::cout << "surfTypeGraphButton\n";
            /*imageGraphic = new Texture("", "surface_type_graph.jpg");
            spriteGraphic->setColor(transform_color(1, 1, 1, 1));
            spriteGraphic->SetTexture(imageGraphic);*/
            canGetSurfTypeGraph = false;
        }
#endif

        if (!zoomInButton->isPresed())
            canZoomIn = true;
        if (!zoomOutButton->isPresed())
            canZoomOut = true;

        if (!impulseGraphButton->isPressed())
            graph = true;
        if (!impulseHistButton->isPresed())
            hist = true;
        if (!altGraphButton->isPresed())
            alt = true;
        if (!surfTypeGraphButton->isPresed())
            surf = true;

        if (map != nullptr) {
            if (window->isKeyPressed(GLFW_KEY_D)) {
                if (map->CanMoveLeft())
                    map->MoveLeft();
            }
            else if (window->isKeyPressed(GLFW_KEY_A)) {
                if (map->CanMoveRight())
                    map->MoveRight();
            }
            else if (window->isKeyPressed(GLFW_KEY_W)) {
                if (map->CanMoveDown())
                    map->MoveDown();
            }
            else if (window->isKeyPressed(GLFW_KEY_S)) {
                if (map->CanMoveUp())
                    map->MoveUp();
            }
            map->TransformTiles();
        }
    }

    bool flag = false;

    void render() override
    {
        if (map != nullptr) {
            map->render();
        }

        layer2->render();
        mapMask->render();
    }
};

int main()
{
    App app;
    app.start();

    return 0;
}